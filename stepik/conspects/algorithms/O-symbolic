 О-символика:

 Плюсы:
- характеризует зависимость времени работы от размера входных данных
- более простые оценки (O(n**2) вместо (3 * n**2 + 5*n + 3))
- упрощенный анализ (не думаем, сколько в действит. занимает одна операция)
- не зависит от оборудования

 Минусы:
- скрывает константные множители, которые могут оказаться важными (n**2 в 3 раза быстрее, чем 3*n**2)

 Общие правила:

- постоянные множителиможн опускать
- многочлен более высокой степени растет быстрее (n**3 > n**2)
- экспонента растет быстрее многочлена, при больших n (n**a < b**n)
- многочлен растет быстрее логарифма ((log n)**a < n**b) пример: n*log n <= O(n**2)
- медленнее растущие слагаемые можно опускать (f + g ~ O(max(f,g)))

 Часто используемые функции:

- log n < n**0.5 < n < n*log n < n**2 < 2**n
- max(n) для работы за 1 сек:
    * n - 10**9
    * n*log n - 10**7
    * n**2 - 10**4.5
    * 2**n - 30

 Скорость роста на практике:

- создание массива из n ~ O(n)
- f[0] = const ~ O(1) (присваивание)
- for i in range(n) ~ O(n)
- f[i] = f[i-1] + f[i-2] ~ O(n) при больших числах
- return n ~ O(1)

 Измерение скорости работы функции на графике(Python3):

- ДОПОЛНЕНИЕ:
    from functools import lru_cache
    lru_cache(maxsize=None)(f) - кэширует все значения f

import time

def timed(f, *args, n_iter=100): - функция, считающая время, за которое отработает заданная функция при заданных аргументах
    acc = float("inf")           - берем max float, в котором будем хранить min время
    for i in range(n_iter):      - n_iter раз пробуем нашу функцию на одном наборе аргументов
        t0 = time.perf_counter   - время старта
        f(*args)                 - запускаем функцию
        t1 = time.perf_counter   - время конца работы функции
        acc = min(acc, t1 - t0)  - берем min время из всех итераций
    return acc

from mathplotlib import pyplot as plt

def compare(fs, args):                                                     - функция строит график по заданным функциям и аргументам
    for f in fs:                                                           - перебор функций
        plt.plot(args, [timed(f, arg) for arg in args, label=f.__name__])  - построение графика для каждой f
    plt.legend()                                                           - добавление в легенду (div с описанием имен и цвета f)
    plt.grid(True)                                                         - добавление сетки на график
    plt.show()                                                             - отобразить полученный график
