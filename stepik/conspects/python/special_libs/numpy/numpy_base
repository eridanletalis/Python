 NUMNUMPY:

    - import numpy as np - классический импорт модуля
    - np.ndarray - основной элемент работы. Многомерный массив элементов одного типа

    - методы ndarray:
        * .ndim - размерность массива.
        * .shape - кортеж натуральных чисел, показывающий длину массива по каждой оси (Для матрицы из n строк и m столбов, shape будет (n,m))
        * .size - кол-во элементов массива
        * .dtype - объект, описывающий тип элементов массива (bool_, character, int64, float64, complex64, object_)
        * .itemsize - размер каждого элемента массива в байтах
        * .data - буфер, содержащий фактические элементы массива

    - создание массива:
        * a = np.array([1, 2, 3]) - обычный одномерный массив
        * a = np.array([[1.5, 2, 3], [4, 5, 6]]) - одномерный массив с указанием имени индекса ([0] = [4] и т.д)
        * a = np.array([[1.5, 2, 3], [4, 5, 6]], dtype=np.complex) - переопределение типа элементов
        * a = np.zeros((3, 5)) - массив нулей размером 3 на 5, принимает кортеж
        * a = np.ones((2, 2)) - массив единиц размером 2 на 2, принимает кортеж
        * a = np.eye(5) - единичная матрица 5 на 5 (гл.диагональ - 1, остальные - 0)
        * a = np.empty((3, 3)) - создает массив без заполнения, его значения случайны
        * a = np.arange(10, 30, 5) - одномерный массив от 10 до 30 с шагом 5
        * a = np.arange(0, 1, 0.1) - одномерный массив от 0 до 1 с шагом 0.1
        * a = np.linspace(0, 2, 9) - одномерный массив из 9-ти чисел с распределением в интервале [0, 2]
        * a = np.fromfunction(f1, (3, 4)) - двумерный массив со значениями функции для всех комбинаций i и j
