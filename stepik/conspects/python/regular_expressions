 Регулярные выражения:

- r"asd \n asd" - "сырая" строка, в которой \n и т.п не будут работать
- r"asd\?" - метасимволы нужно экранировать

- import re - модуль для работы с регулярными выражениями
- методы модуля re:
    * re.match(pattern, string) - подходит ли строка под шаблон (возвращает Match.obj или None) и выбирает самый длинный IF - можно
    * re.search(pattern, string) - находит первую подстроку,подходящую под шаблон (возвращает Match.obj или None)
    * re.findall(pattern, string) - находит все подстроки, подходящие под шаблон (возвращает list)
    * re.sub(pattern, replace_str, string) - находит и заменяет все подстроки, подходящие под шаблон (возвращает исправленный str)

 Синтаксис регулярных выражений:

- [] - множество подходящих символов
- ". ^ $ * + ? { } [ ] \ | ( )" - метасимволы
- \d - [0-9]
- \D - [^0-9]
- \s - [\t \n \r \f \v] - пробельные символы
- \S - ^ --\\--
- \w - [a-zA-Z0-9_]
- \W - [^a-zA-Z0-9_]
- '.' - любой символ
- a* - любое кол-во символов 'a' [0, +inf)  |  - жадные метасимволы (т.е находят все подстроки, подходящие под шаблон)
- a+ - любое кол-во символов 'a' [1, +inf)  |
- a? - любое кол-во символов 'a' [0, 1]
- a{3} - ровно 3 символа 'a'
- a{2,4} -  любое кол-во символов 'a' [2, 4]
- (text|test) -> "texttest" - группы символов
- match.groups() - возвращает список символов, подходящих под группы в порядке открытия скобок (0) - по нулевому индексу
- \3 - найти точно такую-же строку, которую нашли в 3 группе