 Функции:

- def give(a):
    return a
- функция объявляется до ее вызова
- def a(*x): ... - произвольное кол-во параметров (внутри функции *x - КОРТЕЖ! переменных в порядке добавления)
- может быть void(без return)
- def a(x, y, z = 0): ... - z -значение по умолчанию, является необязательным к указанию (реализация перегрузки)
- к аргументам можно обращаться явно(по имени), тогда можно менять порядок их указания (например print(end = " ", s))
- при ссылке аргумента на реальный объект, он может его изменять с помощью методов, но не может присвоить новый объект

 Локальные переменные:

- находятся внутри тела функции и не могут быть вызваны со внешней стороны
- могут ссылаться на уже существующий объект

 Примеры вызова функции:

- f(x, y) - классический
- f(x = x, y = y) - с указанием имен аргументов
- f(x, y = y) - именованные аргументы всегда после неименованных
- list = [1, 2] - вызов через список (== f(1, 2))
  f(*list)
- args = {'a': 1, 'b': 2} - вызов через словарь (== f(a = 1, b = 2))
  f(**args)

 Примеры аргументов:

- def f(a, b=10, *arg) - а - позиционный аргумент, b - default, *args - кортеж, ТРЕБУЮЩИЙ РАСКРЫТИЯ(., ., ..)
- def f(a, **args) - **args - словарь именованных аргументов, ТРЕБУЮЩИХ РАСКРЫТИЯ, которые не попали позиционные
- правильный порядок аргументов:
    * позиционные
    * по-умолчанию
    * *позиционные
    * только по имени
    * **только по имени
   ПРИМЕР:
    def f(a, b = 10, *args, c = 10, d, **kwagrs): ...